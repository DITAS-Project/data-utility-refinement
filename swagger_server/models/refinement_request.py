# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.data_utility import DataUtility  # noqa: F401,E501
from swagger_server import util


class RefinementRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, application: str=None, datautility: DataUtility=None):  # noqa: E501
        """RefinementRequest - a model defined in Swagger

        :param application: The application of this RefinementRequest.  # noqa: E501
        :type application: str
        :param datautility: The datautility of this RefinementRequest.  # noqa: E501
        :type datautility: DataUtility
        """
        self.swagger_types = {
            'application': str,
            'datautility': DataUtility
        }

        self.attribute_map = {
            'application': 'application',
            'datautility': 'datautility'
        }

        self._application = application
        self._datautility = datautility

    @classmethod
    def from_dict(cls, dikt) -> 'RefinementRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RefinementRequest of this RefinementRequest.  # noqa: E501
        :rtype: RefinementRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application(self) -> str:
        """Gets the application of this RefinementRequest.


        :return: The application of this RefinementRequest.
        :rtype: str
        """
        return self._application

    @application.setter
    def application(self, application: str):
        """Sets the application of this RefinementRequest.


        :param application: The application of this RefinementRequest.
        :type application: str
        """
        allowed_values = ["regression", "classification", "clustering", "associationrules"]  # noqa: E501
        if application not in allowed_values:
            raise ValueError(
                "Invalid value for `application` ({0}), must be one of {1}"
                .format(application, allowed_values)
            )

        self._application = application

    @property
    def datautility(self) -> DataUtility:
        """Gets the datautility of this RefinementRequest.


        :return: The datautility of this RefinementRequest.
        :rtype: DataUtility
        """
        return self._datautility

    @datautility.setter
    def datautility(self, datautility: DataUtility):
        """Sets the datautility of this RefinementRequest.


        :param datautility: The datautility of this RefinementRequest.
        :type datautility: DataUtility
        """
        if datautility is None:
            raise ValueError("Invalid value for `datautility`, must not be `None`")  # noqa: E501

        self._datautility = datautility
